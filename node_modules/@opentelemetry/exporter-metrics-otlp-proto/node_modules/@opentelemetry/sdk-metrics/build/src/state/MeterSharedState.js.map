{"version":3,"file":"MeterSharedState.js","sourceRoot":"","sources":["../../../src/state/MeterSharedState.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime } from '@opentelemetry/api';\nimport { InstrumentationScope } from '@opentelemetry/core';\nimport { MetricCollectOptions } from '../export/MetricProducer';\nimport { ScopeMetrics } from '../export/MetricData';\nimport { createInstrumentDescriptorWithView, InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { Meter } from '../Meter';\nimport { isNotNullish, Maybe } from '../utils';\nimport { AsyncMetricStorage } from './AsyncMetricStorage';\nimport { MeterProviderSharedState } from './MeterProviderSharedState';\nimport { MetricCollectorHandle } from './MetricCollector';\nimport { MetricStorageRegistry } from './MetricStorageRegistry';\nimport { MultiMetricStorage } from './MultiWritableMetricStorage';\nimport { ObservableRegistry } from './ObservableRegistry';\nimport { SyncMetricStorage } from './SyncMetricStorage';\nimport { Accumulation, Aggregator } from '../aggregator/types';\nimport { AttributesProcessor } from '../view/AttributesProcessor';\nimport { MetricStorage } from './MetricStorage';\n\n/**\n * An internal record for shared meter provider states.\n */\nexport class MeterSharedState {\n  metricStorageRegistry = new MetricStorageRegistry();\n  observableRegistry = new ObservableRegistry();\n  meter: Meter;\n\n  constructor(private _meterProviderSharedState: MeterProviderSharedState, private _instrumentationScope: InstrumentationScope) {\n    this.meter = new Meter(this);\n  }\n\n  registerMetricStorage(descriptor: InstrumentDescriptor) {\n    const storages = this._registerMetricStorage(descriptor, SyncMetricStorage);\n\n    if (storages.length === 1)  {\n      return storages[0];\n    }\n    return new MultiMetricStorage(storages);\n  }\n\n  registerAsyncMetricStorage(descriptor: InstrumentDescriptor) {\n    const storages = this._registerMetricStorage(descriptor, AsyncMetricStorage);\n\n    return storages;\n  }\n\n  /**\n   * @param collector opaque handle of {@link MetricCollector} which initiated the collection.\n   * @param collectionTime the HrTime at which the collection was initiated.\n   * @param options options for collection.\n   * @returns the list of metric data collected.\n   */\n  async collect(collector: MetricCollectorHandle, collectionTime: HrTime, options?: MetricCollectOptions): Promise<ScopeMetricsResult> {\n    /**\n     * 1. Call all observable callbacks first.\n     * 2. Collect metric result for the collector.\n     */\n    const errors = await this.observableRegistry.observe(collectionTime, options?.timeoutMillis);\n    const metricDataList = Array.from(this.metricStorageRegistry.getStorages(collector))\n      .map(metricStorage => {\n        return metricStorage.collect(\n          collector,\n          this._meterProviderSharedState.metricCollectors,\n          collectionTime);\n      })\n      .filter(isNotNullish);\n\n    return {\n      scopeMetrics: {\n        scope: this._instrumentationScope,\n        metrics: metricDataList.filter(isNotNullish),\n      },\n      errors,\n    };\n  }\n\n  private _registerMetricStorage<MetricStorageType extends MetricStorageConstructor, R extends InstanceType<MetricStorageType>>(descriptor: InstrumentDescriptor, MetricStorageType: MetricStorageType): R[] {\n    const views = this._meterProviderSharedState.viewRegistry.findViews(descriptor, this._instrumentationScope);\n    let storages = views\n      .map(view => {\n        const viewDescriptor = createInstrumentDescriptorWithView(view, descriptor);\n        const compatibleStorage = this.metricStorageRegistry.findOrUpdateCompatibleStorage<R>(viewDescriptor);\n        if (compatibleStorage != null) {\n          return compatibleStorage;\n        }\n        const aggregator = view.aggregation.createAggregator(viewDescriptor);\n        const viewStorage = new MetricStorageType(viewDescriptor, aggregator, view.attributesProcessor) as R;\n        this.metricStorageRegistry.register(viewStorage);\n        return viewStorage;\n      });\n\n    // Fallback to the per-collector aggregations if no view is configured for the instrument.\n    if (storages.length === 0) {\n      const perCollectorAggregations = this._meterProviderSharedState.selectAggregations(descriptor.type);\n      const collectorStorages = perCollectorAggregations.map(([collector, aggregation]) => {\n        const compatibleStorage = this.metricStorageRegistry.findOrUpdateCompatibleCollectorStorage<R>(collector, descriptor);\n        if (compatibleStorage != null) {\n          return compatibleStorage;\n        }\n        const aggregator = aggregation.createAggregator(descriptor);\n        const storage = new MetricStorageType(descriptor, aggregator, AttributesProcessor.Noop()) as R;\n        this.metricStorageRegistry.registerForCollector(collector, storage);\n        return storage;\n      });\n      storages = storages.concat(collectorStorages);\n    }\n\n    return storages;\n  }\n}\n\ninterface ScopeMetricsResult {\n  scopeMetrics: ScopeMetrics;\n  errors: unknown[];\n}\n\ninterface MetricStorageConstructor {\n  new (instrumentDescriptor: InstrumentDescriptor,\n    aggregator: Aggregator<Maybe<Accumulation>>,\n    attributesProcessor: AttributesProcessor): MetricStorage;\n}\n"]}