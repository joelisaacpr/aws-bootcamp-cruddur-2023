{"version":3,"file":"TracerProviderWithEnvExporter.js","sourceRoot":"","sources":["../../src/TracerProviderWithEnvExporter.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { getEnv, getEnvWithoutDefaults } from '@opentelemetry/core';\nimport { ConsoleSpanExporter, SpanExporter, BatchSpanProcessor, SimpleSpanProcessor, SDKRegistrationConfig, SpanProcessor } from '@opentelemetry/sdk-trace-base';\nimport { NodeTracerConfig, NodeTracerProvider } from '@opentelemetry/sdk-trace-node';\nimport { OTLPTraceExporter as OTLPProtoTraceExporter } from '@opentelemetry/exporter-trace-otlp-proto';\nimport { OTLPTraceExporter as OTLPHttpTraceExporter} from '@opentelemetry/exporter-trace-otlp-http';\nimport { OTLPTraceExporter as OTLPGrpcTraceExporter} from '@opentelemetry/exporter-trace-otlp-grpc';\nimport { ZipkinExporter } from '@opentelemetry/exporter-zipkin';\nimport { JaegerExporter } from '@opentelemetry/exporter-jaeger';\n\nexport class TracerProviderWithEnvExporters extends NodeTracerProvider {\n  private _configuredExporters: SpanExporter[] = [];\n  private _spanProcessors: SpanProcessor[] | undefined;\n  private _hasSpanProcessors: boolean = false;\n\n  static configureOtlp(): SpanExporter {\n    const protocol = this.getOtlpProtocol();\n\n    switch (protocol) {\n      case 'grpc':\n        return new OTLPGrpcTraceExporter;\n      case 'http/json':\n        return new OTLPHttpTraceExporter;\n      case 'http/protobuf':\n        return new OTLPProtoTraceExporter;\n      default:\n        diag.warn(`Unsupported OTLP traces protocol: ${protocol}. Using http/protobuf.`);\n        return new OTLPProtoTraceExporter;\n    }\n  }\n\n  static getOtlpProtocol(): string {\n    const parsedEnvValues = getEnvWithoutDefaults();\n\n    return parsedEnvValues.OTEL_EXPORTER_OTLP_TRACES_PROTOCOL ??\n          parsedEnvValues.OTEL_EXPORTER_OTLP_PROTOCOL ??\n          getEnv().OTEL_EXPORTER_OTLP_TRACES_PROTOCOL ??\n          getEnv().OTEL_EXPORTER_OTLP_PROTOCOL;\n  }\n\n  protected static override _registeredExporters = new Map<\n    string,\n    () => SpanExporter\n      >([\n        ['otlp', () => this.configureOtlp()],\n        ['zipkin', () => new ZipkinExporter],\n        ['jaeger', () => new JaegerExporter],\n        ['console', () => new ConsoleSpanExporter]\n      ]);\n\n  public constructor(config: NodeTracerConfig = {}) {\n    super(config);\n    let traceExportersList = this.filterBlanksAndNulls(Array.from(new Set(getEnv().OTEL_TRACES_EXPORTER.split(','))));\n\n    if (traceExportersList.length === 0 || traceExportersList[0] === 'none') {\n      diag.warn('OTEL_TRACES_EXPORTER contains \"none\" or is empty. SDK will not be initialized.');\n    } else {\n      if (traceExportersList.length > 1 && traceExportersList.includes('none')) {\n        diag.warn('OTEL_TRACES_EXPORTER contains \"none\" along with other exporters. Using default otlp exporter.');\n        traceExportersList = ['otlp'];\n      }\n\n      traceExportersList.forEach(exporterName => {\n        const exporter = this._getSpanExporter(exporterName);\n        if (exporter) {\n          this._configuredExporters.push(exporter);\n        } else {\n          diag.warn(`Unrecognized OTEL_TRACES_EXPORTER value: ${exporterName}.`);\n        }\n      });\n\n      if (this._configuredExporters.length > 0) {\n        this._spanProcessors = this.configureSpanProcessors(this._configuredExporters);\n        this._spanProcessors.forEach(processor => {\n          this.addSpanProcessor(processor);\n        });\n      } else {\n        diag.warn('Unable to set up trace exporter(s) due to invalid exporter and/or protocol values.');\n      }\n    }\n  }\n\n  override addSpanProcessor(spanProcessor: SpanProcessor) {\n    super.addSpanProcessor(spanProcessor);\n    this._hasSpanProcessors = true;\n  }\n\n  override register(config?: SDKRegistrationConfig) {\n    if (this._hasSpanProcessors) {\n      super.register(config);\n    }\n  }\n\n  private configureSpanProcessors(exporters: SpanExporter[]): (BatchSpanProcessor | SimpleSpanProcessor)[] {\n    return exporters.map(exporter => {\n      if (exporter instanceof ConsoleSpanExporter) {\n        return new SimpleSpanProcessor(exporter);\n      } else {\n        return new BatchSpanProcessor(exporter);\n      }\n    });\n  }\n\n  private filterBlanksAndNulls(list: string[]): string[] {\n    return list.map(item => item.trim())\n      .filter(s => s !== 'null' && s !== '');\n  }\n}\n"]}