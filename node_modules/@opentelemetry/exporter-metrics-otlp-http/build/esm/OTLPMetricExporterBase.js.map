{"version":3,"file":"OTLPMetricExporterBase.js","sourceRoot":"","sources":["../../src/OTLPMetricExporterBase.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,OAAO,EAEL,MAAM,EACP,MAAM,qBAAqB,CAAC;AAC7B,OAAO,EACL,sBAAsB,EAEtB,cAAc,EAGf,MAAM,4BAA4B,CAAC;AAMpC,OAAO,EAAE,IAAI,EAAE,MAAM,oBAAoB,CAAC;AAE1C,MAAM,CAAC,IAAM,6BAA6B,GAAmC,cAAM,OAAA,sBAAsB,CAAC,UAAU,EAAjC,CAAiC,CAAC;AAErH,MAAM,CAAC,IAAM,wBAAwB,GAAmC,UAAC,cAA8B;IACrG,QAAQ,cAAc,EAAE;QACtB,KAAK,cAAc,CAAC,OAAO,CAAC;QAC5B,KAAK,cAAc,CAAC,kBAAkB,CAAC;QACvC,KAAK,cAAc,CAAC,SAAS,CAAC;QAC9B,KAAK,cAAc,CAAC,gBAAgB;YAClC,OAAO,sBAAsB,CAAC,KAAK,CAAC;QACtC,KAAK,cAAc,CAAC,eAAe,CAAC;QACpC,KAAK,cAAc,CAAC,0BAA0B;YAC5C,OAAO,sBAAsB,CAAC,UAAU,CAAC;KAC5C;AACH,CAAC,CAAC;AAEF,SAAS,wCAAwC;IAC/C,IAAM,GAAG,GAAG,MAAM,EAAE,CAAC;IACrB,IAAM,qBAAqB,GAAG,GAAG,CAAC,iDAAiD,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;IAEzG,IAAI,qBAAqB,KAAK,YAAY,EAAE;QAC1C,OAAO,6BAA6B,CAAC;KACtC;IACD,IAAI,qBAAqB,KAAK,OAAO,EAAE;QACrC,OAAO,wBAAwB,CAAC;KACjC;IAED,IAAI,CAAC,IAAI,CAAC,kEAAgE,GAAG,CAAC,iDAAiD,4FAAyF,CAAC,CAAC;IAC1N,OAAO,6BAA6B,CAAC;AACvC,CAAC;AAED,SAAS,yBAAyB,CAAC,qBAA8C;IAC/E,2CAA2C;IAC3C,IAAI,qBAAqB,IAAI,IAAI,EAAE;QACjC,IAAI,qBAAqB,KAAK,sBAAsB,CAAC,KAAK,EAAE;YAC1D,OAAO,wBAAwB,CAAC;SACjC;QACD,OAAO,6BAA6B,CAAC;KACtC;IAED,OAAO,wCAAwC,EAAE,CAAC;AACpD,CAAC;AAED;IAOE,gCAAY,QAAW,EACrB,MAAkC;QAClC,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC;QAC9B,IAAI,CAAC,+BAA+B,GAAG,yBAAyB,CAAC,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,qBAAqB,CAAC,CAAC;IAClG,CAAC;IAED,uCAAM,GAAN,UAAO,OAAwB,EAAE,cAA8C;QAC7E,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,cAAc,CAAC,CAAC;IACvD,CAAC;IAEK,yCAAQ,GAAd;;;;4BACE,qBAAM,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,EAAA;;wBAAnC,SAAmC,CAAC;;;;;KACrC;IAED,2CAAU,GAAV;QACE,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED,6DAA4B,GAA5B,UAA6B,cAA8B;QACzD,OAAO,IAAI,CAAC,+BAA+B,CAAC,cAAc,CAAC,CAAC;IAC9D,CAAC;IACH,6BAAC;AAAD,CAAC,AA5BD,IA4BC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ExportResult,\n  getEnv\n} from '@opentelemetry/core';\nimport {\n  AggregationTemporality,\n  AggregationTemporalitySelector,\n  InstrumentType,\n  PushMetricExporter,\n  ResourceMetrics\n} from '@opentelemetry/sdk-metrics';\nimport {\n  OTLPMetricExporterOptions\n} from './OTLPMetricExporterOptions';\nimport { OTLPExporterBase } from '@opentelemetry/otlp-exporter-base';\nimport { IExportMetricsServiceRequest } from '@opentelemetry/otlp-transformer';\nimport { diag } from '@opentelemetry/api';\n\nexport const CumulativeTemporalitySelector: AggregationTemporalitySelector = () => AggregationTemporality.CUMULATIVE;\n\nexport const DeltaTemporalitySelector: AggregationTemporalitySelector = (instrumentType: InstrumentType) => {\n  switch (instrumentType) {\n    case InstrumentType.COUNTER:\n    case InstrumentType.OBSERVABLE_COUNTER:\n    case InstrumentType.HISTOGRAM:\n    case InstrumentType.OBSERVABLE_GAUGE:\n      return AggregationTemporality.DELTA;\n    case InstrumentType.UP_DOWN_COUNTER:\n    case InstrumentType.OBSERVABLE_UP_DOWN_COUNTER:\n      return AggregationTemporality.CUMULATIVE;\n  }\n};\n\nfunction chooseTemporalitySelectorFromEnvironment() {\n  const env = getEnv();\n  const configuredTemporality = env.OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE.trim().toLowerCase();\n\n  if (configuredTemporality === 'cumulative') {\n    return CumulativeTemporalitySelector;\n  }\n  if (configuredTemporality === 'delta') {\n    return DeltaTemporalitySelector;\n  }\n\n  diag.warn(`OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE is set to '${env.OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE}', but only 'cumulative' and 'delta' are allowed. Using default ('cumulative') instead.`);\n  return CumulativeTemporalitySelector;\n}\n\nfunction chooseTemporalitySelector(temporalityPreference?: AggregationTemporality): AggregationTemporalitySelector {\n  // Directly passed preference has priority.\n  if (temporalityPreference != null) {\n    if (temporalityPreference === AggregationTemporality.DELTA) {\n      return DeltaTemporalitySelector;\n    }\n    return CumulativeTemporalitySelector;\n  }\n\n  return chooseTemporalitySelectorFromEnvironment();\n}\n\nexport class OTLPMetricExporterBase<T extends OTLPExporterBase<OTLPMetricExporterOptions,\n  ResourceMetrics,\n  IExportMetricsServiceRequest>>\nimplements PushMetricExporter {\n  public _otlpExporter: T;\n  protected _aggregationTemporalitySelector: AggregationTemporalitySelector;\n\n  constructor(exporter: T,\n    config?: OTLPMetricExporterOptions) {\n    this._otlpExporter = exporter;\n    this._aggregationTemporalitySelector = chooseTemporalitySelector(config?.temporalityPreference);\n  }\n\n  export(metrics: ResourceMetrics, resultCallback: (result: ExportResult) => void): void {\n    this._otlpExporter.export([metrics], resultCallback);\n  }\n\n  async shutdown(): Promise<void> {\n    await this._otlpExporter.shutdown();\n  }\n\n  forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  selectAggregationTemporality(instrumentType: InstrumentType): AggregationTemporality {\n    return this._aggregationTemporalitySelector(instrumentType);\n  }\n}\n"]}